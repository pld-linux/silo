--- silo-0.7.3-3/second/main.c.noromfs	Wed Sep 23 10:51:55 1998
+++ silo-0.7.3-3/second/main.c	Wed Sep 23 10:51:59 1998
@@ -24,6 +24,10 @@
 #include <asm/page.h>
 #include <linux/elf.h>
 
+#ifndef	NULL
+#define	NULL	0
+#endif
+
 /* This has to be first initialized variable in main.c */
 
 extern char silo_conf[256];
--- silo-0.7.3-3/second/file.c.noromfs	Wed Sep 23 10:54:29 1998
+++ silo-0.7.3-3/second/file.c	Wed Sep 23 11:01:09 1998
@@ -35,7 +35,9 @@
 }
 };
 #include "ufs.h"
+#if !defined(NO_ROMFS)
 #include "romfs.h"
+#endif
 #include <setjmp.h>
 
 static errcode_t linux_open (const char *name, int flags, io_channel * channel);
@@ -76,7 +78,12 @@
 static char *gunzip_buffer;
 static char *gunzip_inp;
 static char *gunzip_endbuf;
+
+#if !defined(NO_ROMFS)
 static enum { ext2, ufs, romfs } type;
+#else
+static enum { ext2, ufs } type;
+#endif
 
 extern int solaris;
 
@@ -205,12 +212,14 @@
     return 1;
 }
 
+#if !defined(NO_ROMFS)
 static int open_romfs (char *device)
 {
     if (romfs_open (device, linux_io_manager, &fs)) return 0;
     root = ((struct romfs_super_block *)(fs->io->private_data))->checksum;
     return 1;
 }
+#endif
 
 static void rotate (int freq)
 {
@@ -395,6 +404,7 @@
     return dump_finish ();
 }
 
+#if !defined(NO_ROMFS)
 static int dump_romfs (ino_t inode, char *filename)
 {
     if (romfs_block_iterate (fs, inode, dump_block, 0)) {
@@ -403,6 +413,7 @@
     }
     return dump_finish ();
 }
+#endif
 
 int dump_device_range (char *filename, char *bogusdev, int *len, void (*lenfunc)(int, char **, char **))
 {
@@ -530,6 +541,7 @@
 	    return 0;
 	/* Hope nobody is so stupid to load 4GB+ kernel into core :)))) */
 	return ufsi_size(&ui);
+#if !defined(NO_ROMFS)
     } else if (type == romfs) {
     	struct romfs_inode ri;
     	
@@ -540,6 +552,7 @@
     	    return 0;
     	}
     	return ri.size;
+#endif
     }
     return 0;
 }
@@ -580,15 +593,19 @@
 	return dump_device_range (filename, bogdev, len, lenfunc);
     }
     if (!open_ext2 (bogdev)) {
+#if !defined(NO_ROMFS)
         if (!open_romfs (bogdev)) {
+#endif
             if (!open_ufs (bogdev)) {
                 fatal ("Unable to open filesystem");
                 return 0;
             } else type = ufs;
+#if !defined(NO_ROMFS)
         } else {
             type = romfs;
             solaris = 0;
         }
+#endif
     } else {
         type = ext2;
         solaris = 0;
@@ -601,11 +618,13 @@
 	    ext2fs_close (fs);
 	    return 0;
         }
+#if !defined(NO_ROMFS)
     } else if (type == romfs) {
         if (retval = romfs_namei (fs, root, root, filename, &inode)) {
 	    printf ("\nCannot find %s\n", filename);
 	    return 0;
         }
+#endif
     } else if (type == ufs) {
     	cwd = root;
     	if (solaris) {
@@ -657,14 +676,18 @@
         switch (type) {
             case ext2: retval = dump_ext2 (inode, filename); break;
             case ufs: retval = dump_ufs (inode, filename); break;
+#if !defined(NO_ROMFS)
             case romfs: retval = dump_romfs (inode, filename); break;
+#endif
         }
     if (retval && len)
         *len = (size != -1) ? size : get_len (inode);
     switch (type) {
 	case ext2: ext2fs_close (fs); break;
 	case ufs: ufs_close (fs); break;
+#if !defined(NO_ROMFS)
 	case romfs: romfs_close (fs); break;
+#endif
     }
     return retval;
 }
--- silo-0.7.3-3/second/romfs.c.noromfs	Wed Sep 23 11:01:43 1998
+++ silo-0.7.3-3/second/romfs.c	Wed Sep 23 11:02:26 1998
@@ -1,3 +1,4 @@
+#if !defined(NO_ROMFS)
 /* ROMFS filesystem handling
    
    Copyright (C) 1998 Jakub Jelinek <jj@ultra.linux.cz>
@@ -295,3 +296,4 @@
     }
     return 0;
 }
+#endif
